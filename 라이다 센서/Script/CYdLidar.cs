//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CYdLidar : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CYdLidar(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CYdLidar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CYdLidar() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ydlidarPINVOKE.delete_CYdLidar(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CYdLidar() : this(ydlidarPINVOKE.new_CYdLidar(), true) {
  }

  //Initialize the SDK and LiDAR. true if successfully initialized, otherwise false.
  public bool initialize() {
    bool ret = ydlidarPINVOKE.CYdLidar_initialize(swigCPtr);
    return ret;
  }

  public void GetLidarVersion(LidarVersion version) {
    ydlidarPINVOKE.CYdLidar_GetLidarVersion(swigCPtr, LidarVersion.getCPtr(version));
    if (ydlidarPINVOKE.SWIGPendingException.Pending) throw ydlidarPINVOKE.SWIGPendingException.Retrieve();
  }

	//Start the device scanning routine which runs on a separate thread and enable motor.
	public bool turnOn() {
    bool ret = ydlidarPINVOKE.CYdLidar_turnOn(swigCPtr);
    return ret;
  }
	//Get the LiDAR Scan Data. turnOn is successful before doProcessSimple scan data
	public bool doProcessSimple(LaserScan outscan) {
    bool ret = ydlidarPINVOKE.CYdLidar_doProcessSimple(swigCPtr, LaserScan.getCPtr(outscan));
    if (ydlidarPINVOKE.SWIGPendingException.Pending) throw ydlidarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

 

  public bool turnOff() {
    bool ret = ydlidarPINVOKE.CYdLidar_turnOff(swigCPtr);
    return ret;
  }

  public void disconnecting() {
    ydlidarPINVOKE.CYdLidar_disconnecting(swigCPtr);
  }

  public string DescribeError() {
    string ret = ydlidarPINVOKE.CYdLidar_DescribeError(swigCPtr);
    return ret;
  }

  public DriverError getDriverError() {
    DriverError ret = (DriverError)ydlidarPINVOKE.CYdLidar_getDriverError(swigCPtr);
    return ret;
  }

	//set lidar properties
	public bool setlidaropt(int optname, int value) { 
    bool ret = ydlidarPINVOKE.CYdLidar_setlidaropt__SWIG_0(swigCPtr, optname, value);
    return ret;
  }

  public bool setlidaropt(int optname, float value) {
    bool ret = ydlidarPINVOKE.CYdLidar_setlidaropt__SWIG_1(swigCPtr, optname, value);
    return ret;
  }

  public bool setlidaropt(int optname, bool value) {
    bool ret = ydlidarPINVOKE.CYdLidar_setlidaropt__SWIG_2(swigCPtr, optname, value);
    return ret;
  }

  public bool setlidaropt(int optname, string value) {
    bool ret = ydlidarPINVOKE.CYdLidar_setlidaropt__SWIG_3(swigCPtr, optname, value);
    if (ydlidarPINVOKE.SWIGPendingException.Pending) throw ydlidarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getlidaropt_toInt(int optname, SWIGTYPE_p_int optval) {
    bool ret = ydlidarPINVOKE.CYdLidar_getlidaropt_toInt(swigCPtr, optname, SWIGTYPE_p_int.getCPtr(optval));
    return ret;
  }

  public bool getlidaropt_toBool(int optname, SWIGTYPE_p_bool optval) {
    bool ret = ydlidarPINVOKE.CYdLidar_getlidaropt_toBool(swigCPtr, optname, SWIGTYPE_p_bool.getCPtr(optval));
    return ret;
  }

  public bool getlidaropt_toFloat(int optname, SWIGTYPE_p_float optval) {
    bool ret = ydlidarPINVOKE.CYdLidar_getlidaropt_toFloat(swigCPtr, optname, SWIGTYPE_p_float.getCPtr(optval));
    return ret;
  }

  public bool getlidaropt_toString(int optname, SWIGTYPE_p_std__string optval) {
    bool ret = ydlidarPINVOKE.CYdLidar_getlidaropt_toString(swigCPtr, optname, SWIGTYPE_p_std__string.getCPtr(optval));
    return ret;
  }

}
