//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LaserScan : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;



	internal LaserScan(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LaserScan obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LaserScan() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ydlidarPINVOKE.delete_LaserScan(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

	//System time when first range was measured in nanoseconds.
	public ulong stamp {
		set
		{
			ydlidarPINVOKE.LaserScan_stamp_set(swigCPtr, value);
		}
		get
		{
			ulong ret = ydlidarPINVOKE.LaserScan_stamp_get(swigCPtr);
			return ret;
		}
	}

	//-------------------LaserFan---------------

	//System time when first range was measured in nanoseconds.
	public ulong fan_stamp
	{
		set
		{
			ydlidarPINVOKE.LaserFan_stamp_set(swigCPtr, value);
		}
		get
		{
			ulong ret = ydlidarPINVOKE.LaserFan_stamp_get(swigCPtr);
			return ret;
		}
	}

	//Array of lidar points.
	public uint npoints
	{
		set
		{
			ydlidarPINVOKE.LaserFan_npoints_set(swigCPtr, value);
		}
		get
		{
			uint ret = ydlidarPINVOKE.LaserFan_npoints_get(swigCPtr);
			return ret;
		}
	}


	//-------------------LaserPoint---------------

	//lidar angle. unit(rad)
	public float angle
	{
		set
		{
			ydlidarPINVOKE.LaserPoint_angle_set(swigCPtr, value);
		}
		get
		{
			float ret = ydlidarPINVOKE.LaserPoint_angle_get(swigCPtr);
			return ret;
		}
	}

	//lidar range. unit(m)
	public float range
	{
		set
		{
			ydlidarPINVOKE.LaserPoint_range_set(swigCPtr, value);
		}
		get
		{
			float ret = ydlidarPINVOKE.LaserPoint_range_get(swigCPtr);
			return ret;
		}
	}

	//lidar intensity
	public float intensity
	{
		set
		{
			ydlidarPINVOKE.LaserPoint_intensity_set(swigCPtr, value);
		}
		get
		{
			float ret = ydlidarPINVOKE.LaserPoint_intensity_get(swigCPtr);
			return ret;
		}
	}

	//-------------------LidarVersion---------------

	//Hardware version
	public byte hardware
	{
		set
		{
			ydlidarPINVOKE.LidarVersion_hardware_set(swigCPtr, value);
		}
		get
		{
			byte ret = ydlidarPINVOKE.LidarVersion_hardware_get(swigCPtr);
			return ret;
		}
	}

	//major number
	public byte soft_major
	{
		set
		{
			ydlidarPINVOKE.LidarVersion_soft_major_set(swigCPtr, value);
		}
		get
		{
			byte ret = ydlidarPINVOKE.LidarVersion_soft_major_get(swigCPtr);
			return ret;
		}
	}

	//minor number

	public byte soft_minor
	{
		set
		{
			ydlidarPINVOKE.LidarVersion_soft_minor_set(swigCPtr, value);
		}
		get
		{
			byte ret = ydlidarPINVOKE.LidarVersion_soft_minor_get(swigCPtr);
			return ret;
		}
	}

	//patch number

	public byte soft_patch
	{
		set
		{
			ydlidarPINVOKE.LidarVersion_soft_patch_set(swigCPtr, value);
		}
		get
		{
			byte ret = ydlidarPINVOKE.LidarVersion_soft_patch_get(swigCPtr);
			return ret;
		}
	}

	//-------------------string_t---------------
	// Àß ¾ÈµÊ
	public string data
	{
		set
		{
			ydlidarPINVOKE.string_t_data_set(swigCPtr, value);
		}
		get
		{
			string ret = ydlidarPINVOKE.string_t_data_get(swigCPtr);
			return ret;
		}
	}

	//---------------------------------------------------------

	public LaserPointVector points {
    set {
      ydlidarPINVOKE.LaserScan_points_set(swigCPtr, LaserPointVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ydlidarPINVOKE.LaserScan_points_get(swigCPtr);
      LaserPointVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new LaserPointVector(cPtr, false);
      return ret;
    } 
  }

  public LaserConfig config {
    set {
      ydlidarPINVOKE.LaserScan_config_set(swigCPtr, LaserConfig.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ydlidarPINVOKE.LaserScan_config_get(swigCPtr);
      LaserConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new LaserConfig(cPtr, false);
      return ret;
    } 
  }

  public LaserScan() : this(ydlidarPINVOKE.new_LaserScan(), true) {
  }

}
